localrules: download_chrom_size, download_bigiwig, download_cage_ctss, download_reftss, make_genomedata_archives, make_track_file, convert_to_tpm, make_xref_CAGE, filter_TSS, make_include_coord, compute_priors, make_ve_file, filter_TSS_pos_strand, exclude_chrom, aggregate_PR_per_annot_run
from params import (CELLTYPES, HISTONES, UNIFORM_REL_CONF, CELLTYPE_ACCESSION, CELLTYPE_CTSS, PR_TPM)

############
# FUNCTION #
############

def get_accession(wildcards):
	return CELLTYPE_ACCESSION[wildcards.celltype][wildcards.histone]

def get_ctss_url(wildcards):
	return CELLTYPE_CTSS[wildcards.celltype][wildcards.ctss_id]

def get_ctss_ids(celltype):
	return list(CELLTYPE_CTSS[celltype].keys())

#################
# RUN_ALL rules #
#################

rule all_bigwig:
	input:
		expand("output/{celltype}/Data/{histone}.bigWig", celltype=CELLTYPES, histone=HISTONES)

rule all_genomedata:
	input:
		expand("output/{celltype}/Data/{histone}.genomedata", celltype=CELLTYPES, histone=HISTONES)

rule segway_main:
	input:
		"output/K562/Results/annot_ve_2.5_10000_1.5_50.0_200/segway.bed.gz",
		"output/K562/Results/annot_unsupervised_2.5_10000/segway.bed.gz"

rule all_segway:
	input:
		[f"output/{celltype}/Results/annot_ve_2.5_10000_{uniform}_{relconf}_200/segway.bed.gz" for uniform, relconf in UNIFORM_REL_CONF for celltype in CELLTYPES],
		[f"output/{celltype}/Results/annot_unsupervised_2.5_10000/segway.bed.gz" for celltype in CELLTYPES]

rule all_score_ve:
	input:
		[f"output/{celltype}/Results/annot_ve_2.5_10000_{uniform}_{relconf}_200_scoring_ve_master.tsv" for uniform, relconf in UNIFORM_REL_CONF for celltype in CELLTYPES],
		[f"output/{celltype}/Results/annot_unsupervised_2.5_10000_scoring_ve_master.tsv" for celltype in CELLTYPES]

rule all_segzoo:
	input:
		[f"output/{celltype}/Results/segzoo_ve_2.5_10000_{uniform}_{relconf}_200" for uniform, relconf in UNIFORM_REL_CONF for celltype in CELLTYPES],
		[f"output/{celltype}/Results/segzoo_unsupervised_2.5_10000" for celltype in CELLTYPES]

##################
# DOWNLOAD rules #
##################

rule download_chrom_size:
	output:
		"output/hg38.chrom.sizes"
	shell:
		"wget -O {output} https://hgdownload.cse.ucsc.edu/goldenpath/hg38/bigZips/hg38.chrom.sizes"

rule download_bigiwig:
	params:
		accession=get_accession
	output:
		"output/{celltype}/Data/{histone}.bigWig"
	shell:
		"wget -O {output} https://www.encodeproject.org/files/{params.accession}/@@download/{params.accession}.bigWig"

rule download_cage_ctss:
	params:
		url=get_ctss_url
	output:
		"output/{celltype}/Data/{ctss_id}.ctss.bed.gz"
	shell:
		"wget -O {output} {params.url}"

rule download_reftss:
	output:
		"output/refTSS_v3.3_human_coordinate.hg38.bed.gz"
	shell:
		"wget -O {output} http://reftss.clst.riken.jp/datafiles/3.3/human/refTSS_v3.3_human_coordinate.hg38.bed.gz"

rule make_genomedata_archives:
	input:
		bw=rules.download_bigiwig.output,
		sizes=rules.download_chrom_size.output
	output:
		"output/{celltype}/Data/{histone}.genomedata"
	conda:
		"segway_py36"
	shell:
		"""
		genomedata-load --sizes --sequence {input.sizes} \
		--track {wildcards.histone}={input.bw} \
		output/{wildcards.celltype}/Data/{wildcards.histone}.genomedata
		"""

rule make_track_file:
	output:
		"output/{celltype}/Data/tracks.tsv"
	params:
		histones=HISTONES
	script:
		"scripts/make_track_file.py"

rule convert_to_tpm:
	input:
		rules.download_cage_ctss.output
	output:
		"output/{celltype}/Data/{ctss_id}.ctss.TPM.bed.gz"
	shell:
		"bash scripts/preprocess_TSS/convert_to_TPM.sh {input} | gzip > {output}"

rule make_xref_CAGE:
	input:
		reftss=rules.download_reftss.output,
		replicates=lambda wildcards: expand("output/{celltype}/Data/{ctss_id}.ctss.TPM.bed.gz", celltype=wildcards.celltype, ctss_id=CELLTYPE_CTSS[wildcards.celltype].keys())
	output:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.bed.gz"
	conda:
		"segway_pybedtools"
	shell:
		"bash scripts/preprocess_TSS/xref_CAGE.sh {input} | gzip > {output}"

rule filter_TSS:
	input:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.bed.gz"
	output:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm,[^_]+}.both-strand.bed"
	shell:
		"bash scripts/preprocess_TSS/filter_refTSS.sh {input} {wildcards.tpm} > {output}"

rule exclude_chrom:
	input:
		rules.filter_TSS.output
	output:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm,[^_]+}.both-strand.notchr21.bed"
	shell:
		"bash scripts/exclude_chrom.sh {input} chr21 > {output}"

rule filter_TSS_pos_strand:
	input:
		rules.filter_TSS.output
	output:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm,[^_]+}.pos-strand.bed"
	shell:
		"bash scripts/preprocess_TSS/filter_refTSS_pos_strand.sh {input} > {output}"

rule make_include_coord:
	input:
		genome_sizes=rules.download_chrom_size.output,
		reftss=rules.filter_TSS_pos_strand.output
	output:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm,[^_]+}.pos-strand.BP_EXPAND_{bp_expand}_bothsides.sorted.merged.chr21.bed"
	conda:
		"segway_pybedtools"
	shell:
		"bash scripts/computing_priors/make_include_coords.sh {wildcards.bp_expand} {input} > {output}"

rule compute_priors:
	input:
		rules.filter_TSS_pos_strand.output,
	output:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm,[^_]+}.pos-strand.VE_tanh_uniform_delta.UNIFORM_{uniform}.RELCONF_{relconf,\d+.\d+}.bed"
	shell:
		"bash scripts/computing_priors/compute_priors.sh {input} tanh_uniform_delta {wildcards.uniform} {wildcards.relconf} > {output}"


rule make_ve_file:
	input:
		rules.compute_priors.output,
		rules.download_chrom_size.output
	output:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm,[^_]+}.pos-strand.VE_tanh_uniform_delta.UNIFORM_{uniform}.RELCONF_{relconf}.BP_EXPAND_{bp_expand}.bed"
	conda:
		"segway_pybedtools"
	shell:
		"bash scripts/computing_priors/make_virtual_evidence_file.sh {wildcards.bp_expand} {wildcards.uniform} {wildcards.relconf} {input} > {output}"

rule segway_train_unsupervised:
	input:
		track=rules.make_track_file.output,
		include_coord=rules.make_include_coord.output,
		genomedatas=lambda wildcards: expand("output/{celltype}/Data/{histone}.genomedata", celltype=wildcards.celltype, histone=HISTONES)
	output:
		"output/{celltype}/Results/train_unsupervised_{tpm}_{bp_expand}/params/params.params"
	conda:
		"segway_py36"
	shell:
		"bash scripts/running_VE/train_unsupervised.sh {output} {input}"

rule segway_annot_unsupervised:
	input:
		train_dir=rules.segway_train_unsupervised.output,
		genomedatas=lambda wildcards: expand("output/{celltype}/Data/{histone}.genomedata", celltype=wildcards.celltype, histone=HISTONES)
	output:
		"output/{celltype}/Results/annot_unsupervised_{tpm}_{bp_expand}/segway.bed.gz"
	conda:
		"segway_py36"
	shell:
		"bash scripts/running_VE/annot_unsupervised.sh {input.train_dir} {output} {input.genomedatas}"

rule segway_train_ve:
	input:
		track=rules.make_track_file.output,
		include_coord="output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm}.pos-strand.BP_EXPAND_{bp_expand}_bothsides.sorted.merged.chr21.bed",
		ve="output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm}.pos-strand.VE_tanh_uniform_delta.UNIFORM_{uniform}.RELCONF_{relconf}.BP_EXPAND_{ve_bp_expand}.bed",
		genomedatas=lambda wildcards: expand("output/{celltype}/Data/{histone}.genomedata", celltype=wildcards.celltype, histone=HISTONES)
	output:
		"output/{celltype}/Results/train_ve_{tpm}_{bp_expand}_{uniform}_{relconf}_{ve_bp_expand}/params/params.params"
	conda:
		"segway_py36"
	shell:
		"bash scripts/running_VE/train_ve.sh {output} {input}"

rule segway_annot_ve:
	input:
		train_dir=rules.segway_train_ve.output,
		genomedatas=lambda wildcards: expand("output/{celltype}/Data/{histone}.genomedata", celltype=wildcards.celltype, histone=HISTONES)
	output:
		"output/{celltype}/Results/annot_ve_{tpm}_{bp_expand}_{uniform}_{relconf}_{ve_bp_expand}/segway.bed.gz"
	conda:
		"segway_py36"
	shell:
		"bash scripts/running_VE/annot_unsupervised.sh {input.train_dir} {output} {input.genomedatas}"

rule scoring_PR:
	input:
		ref_tss="output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{pr_tpm}.both-strand.bed",
		segway_annot="output/{celltype}/Results/annot_{unique_id}/segway.bed.gz"
	output:
		temp("output/{celltype}/Results/annot_{unique_id}_{pr_tpm,\d+\.\d+}_scoring_ve.tsv")
	conda:
		"segway_pybedtools"
	shell:
		"python scripts/scoring_VE/compute_postolerant_PR.py {input.segway_annot} {input.ref_tss} 500 chr21 {wildcards.pr_tpm} {output}"

rule aggregate_PR_per_annot_run:
	input:
 		[f"output/{{celltype}}/Results/annot_{{unique_id}}_{pr_tpm}_scoring_ve.tsv" for pr_tpm in PR_TPM]
	output:
		"output/{celltype}/Results/annot_{unique_id}_scoring_ve_master.tsv"
	shell:
		"""
		head -n 1 {input[0]} > {output}
		for i in {input}; do
			tail -n +2 $i >> {output};
		done
		"""

rule run_segzoo:
	input:
		annot="output/{celltype}/Results/annot_{unique_id}/segway.bed.gz",
		train="output/{celltype}/Results/train_{unique_id}/params/params.params"
	output:
		directory("output/{celltype}/Results/segzoo_{unique_id}")
	conda:
		"segzoo_env"
	shell:
		"segzoo -j 8 --dendrogram --parameters {input.train} --outdir {output} {input.annot}" 
 