localrules: all_genomedata, all_tracks, all_ctss, all_tpm, download_chrom_size, download_bigiwig, download_cage_ctss, download_reftss, make_genomedata_archives, make_track_file, convert_to_tpm, make_xref_CAGE, filter_TSS, make_include_coord, compute_priors, make_ve_file, filter_TSS_pos_strand

CELLTYPES = ["K562"]
HISTONES = ["H3K4me1", "H3K4me3", "H3K27me3", "H3K36me3", "H3K9me3", "H3K27ac", "H3K9ac", "DNase"]
UNIFORM_REL_CONF = [
	(1.50, 50.0),
	(1.50, 250.0),
	(1.50, 100.0),
	(1.50, 25.0),
	(1.50, 10.0),
	(1.50, 5.0),
	(1.25, 50.0),
	(1.00, 50.0),
	(0.85, 50.0),
	]

CELLTYPE_ACCESSION = {
	"K562": {
		"H3K4me1": "ENCFF444SGK",
		"H3K4me3": "ENCFF712XRE",
		"H3K27me3": "ENCFF928NWQ",
		"H3K36me3": "ENCFF440XMD",
		"H3K9me3": "ENCFF812HRW",
		"H3K27ac": "ENCFF779QTH",
		"H3K9ac": "ENCFF866KTJ",
		"DNase": "ENCFF868NHV"
	},
	"HepG2": {
		"H3K4me1": "ENCFF058GCZ",
		"H3K4me3": "ENCFF736LHE",
		"H3K27me3": "ENCFF529HLC",
		"H3K36me3": "ENCFF247LOP",
		"H3K9me3": "ENCFF881LOL",
		"H3K27ac": "ENCFF022TZG",
		"H3K9ac": "ENCFF053ROV",
		"DNase": "ENCFF113VII"
	},
	"GM12878": {
		"H3K4me1": "ENCFF564KBE",
		"H3K4me3": "ENCFF776DPQ",
		"H3K27me3": "ENCFF919DOR",
		"H3K36me3": "ENCFF831WJT",
		"H3K9me3": "ENCFF776OVW",
		"H3K27ac": "ENCFF180LKW",
		"H3K9ac": "ENCFF599TRR",
		"DNase": "ENCFF960FMM"
	}
}



CELLTYPE_CTSS = {
	"K562": {
		"CNhs12334": "https://fantom.gsc.riken.jp/5/datafiles/reprocessed/hg38_v1/basic/human.cell_line.hCAGE/chronic%2520myelogenous%2520leukemia%2520cell%2520line%253aK562%2520ENCODE%252c%2520biol_rep1.CNhs12334.10824-111C5.hg38.nobarcode.ctss.bed.gz",
		"CNhs12335": "https://fantom.gsc.riken.jp/5/datafiles/reprocessed/hg38_v1/basic/human.cell_line.hCAGE/chronic%2520myelogenous%2520leukemia%2520cell%2520line%253aK562%2520ENCODE%252c%2520biol_rep2.CNhs12335.10825-111C6.hg38.nobarcode.ctss.bed.gz",
		"CNhs12336": "https://fantom.gsc.riken.jp/5/datafiles/reprocessed/hg38_v1/basic/human.cell_line.hCAGE/chronic%2520myelogenous%2520leukemia%2520cell%2520line%253aK562%2520ENCODE%252c%2520biol_rep3.CNhs12336.10826-111C7.hg38.nobarcode.ctss.bed.gz",
		"CNhs11250": "https://fantom.gsc.riken.jp/5/datafiles/reprocessed/hg38_v1/basic/human.cell_line.hCAGE/chronic%2520myelogenous%2520leukemia%2520cell%2520line%253aK562.CNhs11250.10454-106G4.hg38.nobarcode.ctss.bed.gz"
	},
	"HepG2": {
		"CNhs12328": "https://fantom.gsc.riken.jp/5/datafiles/reprocessed/hg38_v1/basic/human.cell_line.hCAGE/hepatocellular%2520carcinoma%2520cell%2520line%253a%2520HepG2%2520ENCODE%252c%2520biol_rep1.CNhs12328.10818-111B8.hg38.nobarcode.ctss.bed.gz",
		"CNhs12329": "https://fantom.gsc.riken.jp/5/datafiles/reprocessed/hg38_v1/basic/human.cell_line.hCAGE/hepatocellular%2520carcinoma%2520cell%2520line%253a%2520HepG2%2520ENCODE%252c%2520biol_rep2.CNhs12329.10819-111B9.hg38.nobarcode.ctss.bed.gz",
		"CNhs12330": "https://fantom.gsc.riken.jp/5/datafiles/reprocessed/hg38_v1/basic/human.cell_line.hCAGE/hepatocellular%2520carcinoma%2520cell%2520line%253a%2520HepG2%2520ENCODE%252c%2520biol_rep3.CNhs12330.10820-111C1.hg38.nobarcode.ctss.bed.gz"
	},
	"GM12878": {
		"CNhs12331": "https://fantom.gsc.riken.jp/5/datafiles/reprocessed/hg38_v1/basic/human.cell_line.hCAGE/B%2520lymphoblastoid%2520cell%2520line%253a%2520GM12878%2520ENCODE%252c%2520biol_rep1.CNhs12331.10821-111C2.hg38.nobarcode.ctss.bed.gz",
		"CNhs12332": "https://fantom.gsc.riken.jp/5/datafiles/reprocessed/hg38_v1/basic/human.cell_line.hCAGE/B%2520lymphoblastoid%2520cell%2520line%253a%2520GM12878%2520ENCODE%252c%2520biol_rep2.CNhs12332.10822-111C3.hg38.nobarcode.ctss.bed.gz",
		"CNhs12333": "https://fantom.gsc.riken.jp/5/datafiles/reprocessed/hg38_v1/basic/human.cell_line.hCAGE/B%2520lymphoblastoid%2520cell%2520line%253a%2520GM12878%2520ENCODE%252c%2520biol_rep3.CNhs12333.10823-111C4.hg38.nobarcode.ctss.bed.gz"
	}
}

############
# FUNCTION #
############

def get_accession(wildcards):
	return CELLTYPE_ACCESSION[wildcards.celltype][wildcards.histone]

def get_ctss_url(wildcards):
	return CELLTYPE_CTSS[wildcards.celltype][wildcards.ctss_id]

def get_ctss_ids(celltype):
	return list(CELLTYPE_CTSS[celltype].keys())

#################
# RUN_ALL rules #
#################

rule all_genomedata:
	input:
		expand("output/{celltype}/Data/{histone}.genomedata",
			celltype=CELLTYPES, histone=HISTONES)

rule all_tracks:
	input:
		expand("output/{celltype}/Data/tracks.tsv", celltype=CELLTYPES)

rule all_ctss:
	input:
		expand("output/{celltype}/Data/{ctss_id}.ctss.bed.gz", celltype=CELLTYPES, ctss_id=CELLTYPE_CTSS["K562"].keys())

rule all_tpm:
	input:
		[f"output/{celltype}/Data/{ctss_id}.ctss.TPM.bed.gz" for celltype in CELLTYPES for ctss_id in CELLTYPE_CTSS[celltype]]

rule all_segway:
	input:
		[f"output/{celltype}/Results/train_2.5_10000_{uniform}_{relconf}/params/params.params" for celltype in CELLTYPES for uniform, relconf in UNIFORM_REL_CONF]

rule all_segway_train_VE:
	input:
		[f"output/K562/Results/train_2.5_10000_{uniform}_{relconf}/params/params.params" for uniform, relconf in UNIFORM_REL_CONF]

##################
# DOWNLOAD rules #
##################

rule download_chrom_size:
	output:
		"output/hg38.chrom.sizes"
	shell:
		"wget -O {output} https://hgdownload.cse.ucsc.edu/goldenpath/hg38/bigZips/hg38.chrom.sizes"

rule download_bigiwig:
	params:
		accession=get_accession
	output:
		"output/{celltype}/Data/{histone}.bigWig"
	shell:
		"wget -O {output} https://www.encodeproject.org/files/{params.accession}/@@download/{params.accession}.bigWig"

rule download_cage_ctss:
	params:
		url=get_ctss_url
	output:
		"output/{celltype}/Data/{ctss_id}.ctss.bed.gz"
	shell:
		"wget -O {output} {params.url}"
		
rule download_reftss:
	output:
		"output/refTSS_v3.3_human_coordinate.hg38.bed.gz"
	shell:
		"wget -O {output} http://reftss.clst.riken.jp/datafiles/3.3/human/refTSS_v3.3_human_coordinate.hg38.bed.gz"

rule make_genomedata_archives:
	input:
		bw="output/{celltype}/Data/{histone}.bigWig",
		sizes="output/hg38.chrom.sizes"
	output:
		"output/{celltype}/Data/{histone}.genomedata"
	conda:
		"envs/segwayVE_genomedata.yaml"
	shell:
		"""
		genomedata-load --sizes --sequence {input.sizes} \
		--track {wildcards.histone}={input.bw} \
		output/{wildcards.celltype}/Data/{wildcards.histone}.genomedata
		"""

rule make_track_file:
	output:
		"output/{celltype}/Data/tracks.tsv"
	params:
		histones=HISTONES
	script:
		"scripts/make_track_file.py"

rule convert_to_tpm:
	input:
		"output/{celltype}/Data/{ctss_id}.ctss.bed.gz"
	output:
		"output/{celltype}/Data/{ctss_id}.ctss.TPM.bed.gz"
	shell:
		"bash scripts/preprocess_TSS/convert_to_TPM.sh {input} | gzip > {output}"

rule make_xref_CAGE:
	input:
		reftss="output/refTSS_v3.3_human_coordinate.hg38.bed.gz",
		replicates=lambda wildcards: expand("output/{celltype}/Data/{ctss_id}.ctss.TPM.bed.gz", celltype=wildcards.celltype, ctss_id=CELLTYPE_CTSS[wildcards.celltype].keys())
	output:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.bed.gz"
	shell: 
		"bash scripts/preprocess_TSS/xref_CAGE.sh {input} | gzip > {output}" 

rule filter_TSS:
	input:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.bed.gz"
	output:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm}.both-strand.bed"
	shell:
		"bash scripts/preprocess_TSS/filter_refTSS.sh {input} {wildcards.tpm} > {output}"


rule filter_TSS_pos_strand:
	input:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm}.both-strand.bed"
	output:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm}.pos-strand.bed"
	shell:
		"bash scripts/preprocess_TSS/filter_refTSS_pos_strand.sh {input} > {output}"

rule make_include_coord:
	input: 
		genome_sizes="output/hg38.chrom.sizes",
		reftss="output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm}.pos-strand.bed",
	output:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm}.pos-strand.{bp_expand}bothsides.sorted.merged.chr21.bed"
	shell:
		"bash scripts/computing_priors/make_include_coords.sh {wildcards.bp_expand} {input} > {output}"

rule compute_priors:
	input:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm}.both-strand.bed"
	output:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm}.VE_tanh_uniform_delta_{uniform}_{relconf}rel_priors.bed"
	shell:
		"bash scripts/computing_priors/compute_priors.sh {input} tanh_uniform_delta {wildcards.uniform} {wildcards.relconf} > {output}"


rule make_ve_file:
	input:
		"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm}.VE_tanh_uniform_delta_{uniform}_{relconf}rel_priors.bed",
	output:
		#"output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm}.VE_tanh_uniform_delta_{uniform}_{relconf}rel.pos-strand.{bp_expand}bp.bed"
	shell:
		"bash scripts/computing_priors/make_virtual_evidence_file.sh {wildcards.bp_expand} {wildcards.uniform} {wildcards.relconf} {input} > {output}"

rule segway_train_unsupervised:
	input:
		track="output/{celltype}/Data/tracks.tsv",
		include_coord="output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm}.pos-strand.{bp_expand}bothsides.sorted.merged.chr21.bed",
		genomedatas=lambda wildcards: expand("output/{celltype}/Data/{histone}.genomedata", celltype=wildcards.celltype, histone=HISTONES)
	output:
		"output/{celltype}/Results/train_{tpm}_{bp_expand}/params/params.params"
	shell:
		"bash scripts/running_VE/train_unsupervised.sh {output} {input}"

rule segway_train_VE:
	input:
		track="output/{celltype}/Data/tracks.tsv",
		include_coord="output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm}.pos-strand.{bp_expand}bothsides.sorted.merged.chr21.bed",
		ve="output/{celltype}/Data/refTSS_v3.3_human_coordinate.hg38.xCAGE.TPM_{tpm}.VE_tanh_uniform_delta_{uniform}_{relconf}rel.pos-strand.{bp_expand}bp.bed",
		genomedatas=lambda wildcards: expand("output/{celltype}/Data/{histone}.genomedata", celltype=wildcards.celltype, histone=HISTONES)
	output:
		"output/{celltype}/Results/train_{tpm}_{bp_expand}_{uniform}_{relconf}/params/params.params"
	shell:
		"bash scripts/running_VE/train_ve.sh {output} {input}"

rule segway_annot_unsupervised:
	input:
		train_dir="output/{celltype}/Results/train_{tpm}_{bp_expand}/params/params.params",
		genomedatas=lambda wildcards: expand("output/{celltype}/Data/{histone}.genomedata", celltype=wildcards.celltype, histone=HISTONES)
	output:
		"output/{celltype}/Results/annot_{tpm}_{bp_expand}/segway.bed.gz"
	shell:
		"""
		bash scripts/running_VE/annot_unsupervised.sh {input.train_dir} {output} {input.genomedatas}
		"""
		